:- use_module(library(clpfd)).
:- use_module(library(lists)).
:- use_rendering(table).

skyScrapers(Board) :-
	length(Board, 6),
    maplist(same_length(Board), Board),
    Board = [
            [_,B1,C1,D1,E1,_],
            [A2,B2,C2,D2,E2,F2],
            [A3,B3,C3,D3,E3,F3],
            [A4,B4,C4,D4,E4,F4],
            [A5,B5,C5,D5,E5,F5],
            [_,B6,C6,D6,E6,_]],
    Rows = [
            [B2,C2,D2,E2],
            [B3,C3,D3,E3],
            [B4,C4,D4,E4],
            [B5,C5,D5,E5]],
    
    LabelsL = [[A2],[A3],[A4],[A5]],
    LabelsU = [[B1],[C1],[D1],[E1]],
    LabelsR = [[F2],[F3],[F4],[F5]],
    LabelsD = [[B6],[C6],[D6],[E6]],

    append(Board, Vs),
    Vs ins 0..4,
    append(Rows, Vs2),
    Vs2 ins 1..4,

    maplist(all_distinct, Rows),
    transpose(Rows, Columns),
    maplist(all_distinct, Columns),
    maplist(reverse,Rows,RowsR),
    maplist(reverse,Columns,ColumnsR),
	
    maplist(build,Rows,LabelsL),
    maplist(build,Columns,LabelsU),
	maplist(build,RowsR,LabelsR),
	maplist(build,ColumnsR,LabelsD),
    
    maplist(label,Rows).

% example(1,Board),skyScrapers(Board).

build(Row, Tag) :-
    length(Row, 4),
    permutation(Row, [1, 2, 3, 4]),
    check_view(Row, Result),
    member(Result, Tag).

check_view(Row,K) :-
    view(Row, 0, 0, K), !.

view([], _, Count, Count).

view([H|T], Max, Count, Result) :-
    H #> Max,
    NewCount #= Count + 1,
    view(T, H, NewCount, Result).

view([H|T], Max, Count, Result) :-
    H #< Max,
    view(T, Max, Count, Result).

%PrzykÅ‚adowe zapytanie do view: ?- check_view([1,2,3,4],K).
/*
example(1,Board), skyScrapers(Board),
maplist(label, Board),
maplist(portray_clause, Board).
 */

example(1, [
	[0,3,3,2,1,0],
    [4,_,_,_,_,1],
    [2,_,_,_,_,2],
	[1,_,_,_,_,4],
    [2,_,_,_,_,2],
    [0,2,1,3,2,0]]).
